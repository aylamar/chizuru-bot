generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id                         Int         @id @unique @default(autoincrement())
  guildId                    String      @unique
  musicChannelId             String?
  streamPingRoleId           String?
  streamPingRandomUser       Boolean     @default(false)
  logBlacklistedChannels     String[]
  logDeletedMessagesChannels String[]
  logEditedMessagesChannels  String[]
  logVoiceStateChannels      String[]
  starboards                 Starboard[]
  channels                   Channel[]
  users                      User[]
  created                    DateTime    @default(now())
  updated                    DateTime    @updatedAt
  starboardId                Int?
}

model Starboard {
  id                    Int                @id @unique @default(autoincrement())
  guild                 Guild              @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  guildId               String
  channelId             String             @unique
  emote                 String
  emoteCount            Int                @default(5)
  maxMessageAge         Int                @default(72)
  blacklistedChannelIds String[]
  blacklistedRoleIds    String[]
  blacklistedUserIds    String[]
  starboardMessage      StarboardMessage[]

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt
}

model StarboardMessage {
  id            Int       @id @unique @default(autoincrement())
  starboard     Starboard @relation(fields: [starboardId], references: [id], onDelete: Cascade)
  starboardId   Int
  messageId     String    @unique
  userMessageId String
  emoteCount    Int
  deleted       Boolean   @default(false)

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@unique([starboardId, userMessageId])
}

model Channel {
  id        Int    @id @unique @default(autoincrement())
  channelId String @unique
  guild     Guild  @relation(fields: [guildId], references: [guildId])
  guildId   String

  followedStreamers Streamer[]
  messageStats      MessageStats[]

  created DateTime @default(now())
  updated DateTime @default(now())
}

model User {
  id           Int            @id @unique @default(autoincrement())
  userId       String         @unique
  guilds       Guild[]
  messageStats MessageStats[]

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt
}

model Streamer {
  id                Int            @id @default(autoincrement())
  username          String
  displayName       String
  platform          StreamPlatform @default(twitch)
  isLive            Boolean        @default(false)
  statusChangeTime  DateTime       @default(now())
  avatarUrl         String
  created           DateTime       @default(now())
  updated           DateTime       @default(now()) @updatedAt
  followingChannels Channel[]

  @@unique([username, platform])
}

model MessageStats {
  id           Int     @id @unique @default(autoincrement())
  user         User    @relation(fields: [userId], references: [userId])
  userId       String
  channel      Channel @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  channelId    String
  messageCount Int

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@unique([channelId, userId])
}

enum StreamPlatform {
  twitch
}
