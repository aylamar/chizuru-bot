generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id                         String          @id @unique
  ownerId                    String
  musicChannelId             String?
  streamPingRoleId           String?
  logBlacklistedChannels     String[]
  logDeletedMessagesChannels String[]
  logEditedMessagesChannels  String[]
  logVoiceStateChannels      String[]
  filteredStrings            String[]
  filteredExtensions         String[]
  modules                    CommandModule[]
  starboards                 Starboard[]
  channels                   Channel[]
  guildUsers                 GuildUser[]

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Starboard {
  id                    Int                @id @unique @default(autoincrement())
  guild                 Guild              @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId               String
  channelId             String             @unique
  emote                 String
  emoteCount            Int                @default(5)
  maxMessageAge         Int                @default(72)
  blacklistedChannelIds String[]
  blacklistedRoleIds    String[]
  blacklistedUserIds    String[]
  starboardMessage      StarboardMessage[]

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt
}

model StarboardMessage {
  id            String    @id @unique
  starboard     Starboard @relation(fields: [starboardId], references: [id], onDelete: Cascade)
  starboardId   Int
  userMessageId String
  emoteCount    Int
  deleted       Boolean   @default(false)

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@unique([starboardId, userMessageId])
}

model Channel {
  id                String         @id @unique
  guild             Guild          @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId           String
  followedStreamers Streamer[]
  messageStats      MessageStats[]

  created DateTime @default(now())
  updated DateTime @default(now())
}

model User {
  id        String      @id @unique
  guildUser GuildUser[]

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt
}

model GuildUser {
  id              String         @id @unique @default(cuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @unique
  guild           Guild          @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId         String
  dashboardAccess Boolean        @default(false)
  messageStats    MessageStats[]

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@unique([userId, guildId])
}

model Streamer {
  id                String         @id @unique @default(cuid())
  platformId        String
  platform          StreamPlatform @default(twitch)
  username          String
  displayName       String
  isLive            Boolean        @default(false)
  statusChangeTime  DateTime       @default(now())
  avatarUrl         String
  followingChannels Channel[]

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@unique([platformId, platform])
}

model MessageStats {
  id           String    @id @unique @default(cuid())
  guildUser    GuildUser @relation(fields: [userId, guildId], references: [userId, guildId], onDelete: Cascade)
  userId       String
  guildId      String
  channel      Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId    String
  messageCount Int

  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@unique([channelId, userId])
}

enum CommandModule {
  admin
  global
  music
}

enum StreamPlatform {
  twitch
}

generator dbml {
  provider = "prisma-dbml-generator"
}
